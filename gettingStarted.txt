todo list nest js (BE), next js (FE)
video tutorial : https://www.youtube.com/watch?v=9jUh0Y2A3X4

link be : https://www.fullstackbook.com/backend/nestjs-todo/

link fe : https://www.fullstackbook.com/frontend/nextjs-todo/

dokumentasi https://docs.nestjs.com/first-steps 

npm run start

run command line in terminal:
1. npm i -g @nestjs/cli (install globally once)
2. buka dulu vscode buka folder new abis itu di terminalnya tuliskan
nest new project-name --> nest new todo-app-nestjs
nanti akan terbentuk folder todo-app-nestjs
3. cd todo-app-nestjs
4. npm install --save @nestjs/config @nestjs/typeorm typeorm pg (install some dependencies) 
5. npm run start:dev
6. ke browser ketik http://localhost:8000/ nanti keluar Hello World!
7. config .env
8. ke main.ts ubah sesuai link be (Entry Point / CORS)
9. bikin file http-exception.filter.ts di folder src, copas sesuai link be (Exception Handler)
10. app.module.ts ubah sesuai link be
11. app.service.ts ubah sesuai link be
12. ke package.json tambahin "typeorm": "typeorm-ts-node-commonjs -d src/data-source.ts"

"typeorm-ts-node-commonjs": allows you to run TypeScript files directly without explicitly compiling them to JavaScript

"-d src/data-source.ts": specifies the file to be executed. to the "data-source.ts" file located in the "src" directory. The "-d" flag is used to specify the file or directory to be executed

when you run the command "npm run typeorm", it will execute TypeORM using ts-node-commonjs and run the "src/data-source.ts" file as the entry point. This script is commonly used for TypeORM-related tasks such as running migrations, generating entities, or executing custom scripts related to database operations.

What is the use of TypeORM?
TypeORM is a TypeScript ORM (object-relational mapper) library that makes it easy to link your TypeScript application up to a relational database database. TypeORM supports MySQL, SQlite, Postgres, MS SQL Server, and a host of other traditional options.


13. bikin file data-source.ts di folder src isi copas link be 


14. npm install typeorm , npm install mysql , 
bikin db command : mysql -u <username> -p -e "CREATE DATABASE <database_name>" --> gbs create manual aja new schema di mysql

15. npx typeorm migration:create src/migration/create-todos-table
// this command line is used to create a new migration file for the TypeORM framework

16. isi dari 1689417580570-create-todos-table.ts sesuai link be ,  npm install dotenv
17. run the migration :

npm run typeorm migration:run 

npm run typeorm migration:show --> Check the migration status

18. nest g resource todo  (nanti kebentuk folder todo)
? What transport layer do you use? REST API
? Would you like to generate CRUD entry points? Yes


 It is used to generate a resource in a NestJS application.
 Here's a breakdown of the generated files and their purposes:
 Module : A module is a container that encapsulates related components, controllers, services, and other files
 controller : The generated controller file (todo.controller.ts) will contain the endpoints (API routes) for handling CRUD operations (Create, Read, Update, Delete) 
 Service :  implements methods that interact with a database, perform data validation, and execute any necessary business operations.
 DTOs (Data Transfer Objects) : define the data structure for creating, updating, and retrieving "todo" resources.

todo.entity.ts

nanti ada di be link copas isinya buat 19-25
19. create-todo.dto.ts (8'35")
20. todo.entity.ts (8'49")
21. todo.controller.spec.ts
22. todo.controller.ts
23. todo.module.ts (9:34)
24. todo.service.spec.ts 
25. todo.service.ts  (10:00)

npm i @nestjs/config


keep in mind:
PS C:\Users\Marceline Megan\Desktop\Study\todo-app-nestjs> npm run start

[Nest] 11824  - 07/19/2023, 14:30:54     LOG [RoutesResolver] AppController {/}: +15ms
[Nest] 11824  - 07/19/2023, 14:30:54     LOG [RouterExplorer] Mapped {/, GET} route +3ms
[Nest] 11824  - 07/19/2023, 14:30:54     LOG [RoutesResolver] TodoController {/todos}: +0ms
[Nest] 11824  - 07/19/2023, 14:30:54     LOG [RouterExplorer] Mapped {/todos, POST} route +1ms
[Nest] 11824  - 07/19/2023, 14:30:54     LOG [RouterExplorer] Mapped {/todos, GET} route +1ms
[Nest] 11824  - 07/19/2023, 14:30:54     LOG [RouterExplorer] Mapped {/todos/:id, GET} route +0ms
[Nest] 11824  - 07/19/2023, 14:30:54     LOG [RouterExplorer] Mapped {/todos/:id, PUT} route +1ms
[Nest] 11824  - 07/19/2023, 14:30:54     LOG [RouterExplorer] Mapped {/todos/:id, DELETE} route +1ms
[Nest] 11824  - 07/19/2023, 14:30:54     LOG [NestApplication] Nest application successfully started +2ms
[Nest] 11824  - 07/19/2023, 14:31:40     LOG [AppService] To Do Book
[Nest] 11824  - 07/19/2023, 14:31:41     LOG [AppService] To Do Book

26. ThunderClient: 
http://localhost:8000/ 
req get
response: Hello World

coba req get:
http://localhost:8000/todos 
req get
response: [] //array kosong krn blm ada data


coba req post:
http://localhost:8000/todos 
req post
body {
    "name": "study javascript"
}
response:
{
  "name": "study javascript",
  "id": 1,
  "completed": false
}

http://localhost:8000/todos 
req get
response: (sekarang udah ada data yg barusan di post)
[
  {
    "id": 1,
    "name": "study javascript",
    "completed": false
  }
]

coba req get by id --> It takes one parameter named id. /todos/:id, where :id is a parameter representing the unique identifier of the todo item.
http://localhost:8000/todos/2
req get
response:
{
  "id": 2,
  "name": "study typescript",
  "completed": false
}

coba req put:
http://localhost:8000/todos/2
req put (edit semua)
body:
{
  "name": "study java"
}
response:
{
  "id": 2,
  "name": "study java"
}
kalo dicoba get (http://localhost:8000/todos/2):
{
  "id": 2,
  "name": "study java",
  "completed": false --> muncul jg 
}


coba req patch:
abis ditambahin controller patch, restart server 
[Nest] 4356  - 07/19/2023, 15:26:55     LOG [RouterExplorer] Mapped {/todos/:id, PATCH} route +1ms

http://localhost:8000/todos/2
req patch (edit sebagian)
body: 
{
  "completed" : true  ---> krn boolean type jangan "true" nanti gak keganti
}
response:
{
  "id": 2,
  "completed": true
}
kalo dicoba get (http://localhost:8000/todos/2):
{
  "id": 2,
  "name": "study java",
  "completed": true
}


coba req delete:
req post dulu, http://localhost:8000/todos
body:
{
  "name": "do nestjs homework"
}
response:
{
  "name": "do nestjs homework",
  "id": 3,
  "completed": false
}

http://localhost:8000/todos/3
req delete
response:
status 200 kosong

coba di req get by id (http://localhost:8000/todos/3)
response:
status 200 kosong ---> berhasil ke delete


coba find all yang completed true
req get
http://localhost:8000/todos?completed=true 
response salah


http://localhost:8000/todos?completed=false
response sudah benar namun =0 dan =1 yg paling benar 


http://localhost:8000/todos?completed=0
response: (sudah benar)
[
  {
    "id": 1,
    "name": "study javascript",
    "completed": false
  },
  {
    "id": 2,
    "name": "study java",
    "completed": false
  },
  {
    "id": 4,
    "name": "homework tailwind css",
    "completed": false
  }
]

http://localhost:8000/todos?completed=1
response: (sudah benar)
[
  {
    "id": 6,
    "name": "eat sandwich",
    "completed": true
  }
]
==========================

PS C:\Users\Marceline Megan\Desktop\Study\todo-app-nestjs> npm run test

> todo-app-nestjs@0.0.1 test
> jest

 FAIL  src/app.controller.spec.ts (10.505 s)
  ● AppController › root › should return "Hello World!"

Test Suites: 1 failed, 2 passed, 3 total
Tests:       1 failed, 4 passed, 5 total
Snapshots:   0 total
Time:        17.834 s
Ran all test suites.

27. app.controller.spec.ts (18:12)
PS C:\Users\Marceline Megan\Desktop\Study\todo-app-nestjs> npm run test

> todo-app-nestjs@0.0.1 test
> jest

 PASS  src/app.controller.spec.ts (8.197 s)
 PASS  src/todo/todo.controller.spec.ts (9.547 s)
 PASS  src/todo/todo.service.spec.ts (9.646 s)

Test Suites: 3 passed, 3 total
Tests:       5 passed, 5 total
Snapshots:   0 total
Time:        10.433 s, estimated 15 s
Ran all test suites.

28. now to front end : todo-app-nextjs